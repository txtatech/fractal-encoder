const workerCode2 = `\nself.onmessage = (event) => {\n  console.log("[Shard 2] Received message from main thread: ", event.data.message);\n  console.log("[Shard 2] URL of the current page: ", event.data.url);\n  console.log("[Shard 2] Protocol: ", event.data.protocol);\n  console.log("[Shard 2] Host: ", event.data.host);\n  console.log("[Shard 2] Port: ", event.data.port);\n  console.log("[Shard 2] Pathname: ", event.data.pathname);\n  console.log("[Shard 2] Blob URLs: ", event.data.blobUrls);\n  console.log("[Shard 2] Binary String URLs: ", event.data.binaryStringUrls);\n  console.log("[Shard 2] Memory info: ", event.data.memoryInfo);\n  self.postMessage({ message: 'Hello from worker 2' });\n};\n\nself.addEventListener('message', (event) => {\n  if (event.data.type === 'heartbeat') {\n    self.postMessage({ type: 'heartbeat' });\n  }\n});\n`;\n\nconst workerBlob2 = new Blob([workerCode2], { type: 'application/javascript' });\nconst workerScriptURL2 = URL.createObjectURL(workerBlob2);\n\nconst workerCode3 = `\nself.onmessage = (event) => {\n  console.log("[Shard 3] Received message from main thread: ", event.data.message);\n  console.log("[Shard 3] URL of the current page: ", event.data.url);\n  console.log("[Shard 3] Protocol: ", event.data.protocol);\n  console.log("[Shard 3] Host: ", event.data.host);\n  console.log("[Shard 3] Port: ", event.data.port);\n  console.log("[Shard 3] Pathname: ", event.data.pathname);\n  console.log("[Shard 3] Blob URLs: ", event.data.blobUrls);\n  console.log("[Shard 3] Binary String URLs: ", event.data.binaryStringUrls);\n  console.log("[Shard 3] Memory info: ", event.data.memoryInfo);\n  self.postMessage({ message: 'Hello from worker 3' });\n};\n\nself.addEventListener('message', (event) => {\n  if (event.data.type === 'heartbeat') {\n    self.postMessage({ type: 'heartbeat' });\n  }\n});\n`;\n\nconst workerBlob3 = new Blob([workerCode3], { type: 'application/javascript' });\nconst workerScriptURL3 = URL.createObjectURL(workerBlob3);\n\nconst mainScript = `\ntry {\n  // Get all blob and binary string URLs\n  const blobUrls = [...document.querySelectorAll('a[href^="blob:"]')].map(a => a.href);\n  const binaryStringUrls = [...document.querySelectorAll('a[href^="data:"]')].map(a => a.href);\n\n  // Get memory info (if available)\n  const memoryInfo = {\n    totalJSHeapSize: performance.memory.totalJSHeapSize,\n    usedJSHeapSize: performance.memory.usedJSHeapSize,\n    jsHeapSizeLimit: performance.memory.jsHeapSizeLimit\n  };\n\n  // Create a worker from the Blob URLs\n  const myWorker2 = new Worker('${workerScriptURL2}');\n  const myWorker3 = new Worker('${workerScriptURL3}');\n\n  // Send messages to the workers, along with the current page URL and other details\n  myWorker2.postMessage({\n    message: 'Hello from the main thread',\n    url: window.location.href,\n    protocol: window.location.protocol,\n    host: window.location.host,\n    port: window.location.port,\n    pathname: window.location.pathname,\n    blobUrls: blobUrls,\n    binaryStringUrls: binaryStringUrls,\n    memoryInfo: memoryInfo\n  });\n\n  myWorker3.postMessage({\n    message: 'Hello from the main thread',\n    url: window.location.href,\n    protocol: window.location.protocol,\n    host: window.location.host,\n    port: window.location.port,\n    pathname: window.location.pathname,\n    blobUrls: blobUrls,\n    binaryStringUrls: binaryStringUrls,\n    memoryInfo: memoryInfo\n  });\n\n  // Listen for messages from the workers\n  myWorker2.onmessage = (event) => {\n    if (event.data.type === 'heartbeat') {\n      console.log("[Shard 2] Received heartbeat from worker 2");\n    } else if (event.data.message) {\n      console.log("[Shard 2]", event.data.message); // Logs 'Hello from the worker'\n    }\n  };\n\n  myWorker3.onmessage = (event) => {\n    if (event.data.type === 'heartbeat') {\n      console.log("[Shard 3] Received heartbeat from worker 3");\n    } else if (event.data.message) {\n      console.log("[Shard 3]", event.data.message); // Logs 'Hello from the worker'\n    }\n  };\n} catch (error) {\n  console.error('An error occurred:', error);\n}\n`;\n\nconst mainBlob = new Blob([mainScript], { type: 'application/javascript' });\nconst mainScriptURL = URL.createObjectURL(mainBlob);\n\nconst fragment = document.createDocumentFragment();\nconst scriptElement = document.createElement('script');\nscriptElement.src = mainScriptURL;\nfragment.appendChild(scriptElement);\ndocument.documentElement.appendChild(fragment);\n